/**
 * @file SecondOrderSampling.hpp
 * @author Martin Gunia
 * 
 * Basic spatial types.
 */

#ifndef __ENDAS_UTILS_SECOND_ORDER_SAMPLING__HPP__
#define __ENDAS_UTILS_SECOND_ORDER_SAMPLING__HPP__

#include <Endas/Core/Core.hpp>

namespace endas
{

/** 
 * @addtogroup utils
 * @{ 
 */


/**
 * Generates random orthonormal matrix.
 * 
 * The matrix is generated by QR decomposition of a matrix of random numbers drawn from 
 * @f$\mathcal{N}(0, 1)@f$.
 * 
 * @rst
 * .. note::
 *    The matrix is generated in-place if ``out`` is a square matrix. Otherwise a temporary matrix
 *    is allocated and a block is then copied to ``out``. This comes with a memory and CPU cost and
 *    it may therefore be preferrable to always supply a square matrix.
 * @endrst
 */
ENDAS_DLL void generateRandomOrthoMatrix(Ref<Array2d> out);



/** 
 * Performs second-order exact sampling from a large set of realizations.
 * 
 * See Pham, D.T.. (2001). Stochastic methods for sequential data assimilation in strongly 
 * nonlinear systems. Monthly Weather Review. 129. 1194-1207. 
 */
class ENDAS_DLL SecondOrderExactSample
{
public:

    /**
     * Decomposes the model trajectory given by ``mt`` into eigenvectors and eigenvalues 
     * and stores them in this instance.
     * 
     * @param states        Array of system state vector snapshots stored in columns
     * @param subtractMean  If `true` (default), the mean taken from the snapshots will be 
     *                      subtracted from ``states``
     * @param cutoff        
     * 
     * 
     */
    void initFromStates(Ref<Array2d> states, bool subtractMean = true, double cutoff = 0.005);

 
    /**
     * Initializes the sampler from singular value and singluar vector arrays.
     * 
     * @param S  Array of singular values
     * @param U  Two-dimensional array of singular vectors stored as of columns. The number of columns 
     *           must thus be equal to the lengh of ``S``
     */
    void initFromEOFs(Array S, Array2d U);


    /**
     * Returns reference to singular value array.
     */
    const Array& getS() const;

    /**
     * Returns reference to singular vector array.
     */
    const Array2d& getU() const;

    index_t numEOFs() const;

    /**
     * Samples new ensemble perturbations.
     * 
     * The ensemble perturbations are stored in the ``out`` array. The number of columns dictates the
     * number of realizations drawn, the number of rows must be equal to the state size form which 
     * SecondOrderExactSample was initialized.
     * 
     * @param out  Array where the ensemble perturbations are stored
     */
    void samplePerturbations(Ref<Array2d> out);


private:

    // Singular values of the EOFs
    Array mS;

    // Singular vectors of the EOFs
    Array2d mU;


};


/** @} */

}

#endif